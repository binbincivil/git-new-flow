#!/bin/bash

# set this to workaround expr problems in shFlags on freebsd
if uname -s | egrep -iq 'bsd'; then export EXPR_COMPAT=1; fi

# enable debug mode
if [ "$DEBUG" = "yes" ]; then
	set -x
fi

# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export GITNFLOW_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

usage() {
	echo "usage: git nflow <subcommand>"
	echo
	echo "Available subcommands are:"
	echo "   init      Initialize a new git repo with support for the new branching model."
	echo "   feature   Manage your feature branches."
	echo "   version   Shows version information."
	echo
	echo "Try 'git nflow <subcommand> help' or 'git nflow <subcommand> -h' for details."
}

main() {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	# load common functionality
	. "$GITNFLOW_DIR/gitnflow-gitflow-common"
	. "$GITNFLOW_DIR/gitnflow-common"

	# This environmental variable fixes non-POSIX getopt style argument
	# parsing, effectively breaking git-flow subcommand parsing on several
	# Linux platforms.
	export POSIXLY_CORRECT=1

	# use the shFlags project to parse the command line arguments
	. "$GITNFLOW_DIR/gitnflow-shFlags"
	FLAGS_PARENT="git nflow"

    # allow user to request git action logging
    DEFINE_boolean show_commands false 'show actions taken (git commands)' g

    # do actual parsing
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# sanity checks
	SUBCOMMAND="$1"; shift

	if [ ! -e "$GITNFLOW_DIR/git-nflow-$SUBCOMMAND" ]; then
		usage
		exit 1
	fi

	# run command
	. "$GITNFLOW_DIR/git-nflow-$SUBCOMMAND"
	FLAGS_PARENT="git nflow $SUBCOMMAND"

    SUBACTION="default"
    #### if the first argument is '-h', run $SUBCOMMAND's help cmd
    if [ "$1" == "-h" ] ; then
		SUBACTION="help"; shift
	fi

	# test if the first argument is a flag (i.e. starts with '-')
	# in that case, we interpret this arg as a flag for the default
	# command
    if [ "$1" != "" ] && { ! echo "$1" | grep -q "^-"; } ; then
		SUBACTION="$1"; shift
	fi

	if ! type "cmd_$SUBACTION" >/dev/null 2>&1; then
		warn "Unknown subcommand: '$SUBACTION'"
		usage
		exit 1
	fi

	# run the specified action
    if [ $SUBACTION != "help" ] && [ $SUBCOMMAND != "init" ] ; then
        init
    fi
    cmd_$SUBACTION "$@"
}

main "$@"